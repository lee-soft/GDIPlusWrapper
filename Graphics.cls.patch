18a20,23
> Private m_DrawStringRect   As RECTF 'null layout seems to mean automatic
> 
> Private m_DrawStringFormat As Long
> 
56a64,86
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       Exclude
> ' Description:       The Exclude method updates this region to the portion of
> '                    itself that does not intersect another region.
> ' Parameters :       theRect (gdiplus.RECTL)
> '--------------------------------------------------------------------------------
> Public Function Exclude(ByRef theRect As RECTF)
>     SetStatus GdipSetClipRect(m_gfx, theRect.Left, theRect.Top, theRect.Width, theRect.Height, CombineModeExclude)
> End Function
> 
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       ResetExclusions
> ' Description:       The ResetExclusions method sets the clipping region of
> '                    this Graphics object to an infinite region.
> ' Parameters :
> '--------------------------------------------------------------------------------
> Public Function ResetExclusions()
>     SetStatus GdipResetClip(m_gfx)
> End Function
> 
> 
132a185,200
> '--------------------------------------------------------------------------------
> ' Procedure  :       DrawString
> ' Description:       The DrawString method draws a string based on a font and
> '                    an origin for the string.
> ' Parameters :       s (String)
> '                    Font (GDIPFont)
> '                    Brush (GDIPBrush)
> '                    point (POINTF)
> '--------------------------------------------------------------------------------
> Public Sub DrawString(ByRef s As String, _
>                       ByRef Font As GDIPFont, _
>                       ByRef Brush As GDIPBrush, _
>                       ByRef point As POINTF)
>     
>     m_DrawStringRect.Left = point.X
>     m_DrawStringRect.Top = point.Y
133a202,204
>     SetStatus GdipDrawString(m_gfx, s, -1, Font.Value, m_DrawStringRect, _
>         m_DrawStringFormat, Brush.Value)
> End Sub
355a433,745
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       DrawImage
> ' Description:       The DrawImage method draws an image.
> ' Parameters :       Image (GDIPImage)
> '                    X (Single)
> '                    y (Single)
> '                    Width (Single)
> '                    Height (Single)
> '--------------------------------------------------------------------------------
> Public Sub DrawImage(Image As GDIPImage, _
>                       X As Single, _
>                       Y As Single, _
>                       Width As Single, _
>                       Height As Single)
>                         
>     Debug.Print X, Y, Width, Height
>     SetStatus GdipDrawImageRect(m_gfx, Image.nativeImage, X, Y, (Width), (Height))
> End Sub
> 
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       DrawImageRect
> ' Description:       The DrawImageRect method draws an image.
> ' Parameters :       Image (GDIPImage)
> '                    X (Long)
> '                    y (Long)
> '                    Width (Long)
> '                    Height (Long)
> '                    srcX (Long)
> '                    srcY (Long)
> '--------------------------------------------------------------------------------
> Public Sub DrawImageRect(Image As GDIPImage, _
>                          X As Long, _
>                          Y As Long, _
>                          Width As Long, _
>                          Height As Long, _
>                          srcX As Long, _
>                          srcY As Long)
>     
>     SetStatus GdipDrawImageRectRect(m_gfx, Image.nativeImage, X, Y, Width, _
>                 Height, srcX, srcY, Width, Height, UnitPixel)
> End Sub
> 
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       DrawCachedBitmap
> ' Description:       The DrawCachedBitmap method draws the image stored in a
> '                    CachedBitmap object.
> ' Parameters :       Bitmap (GDIPCachedBitmap)
> '                    X (Long)
> '                    y (Long)
> '--------------------------------------------------------------------------------
> Public Sub DrawCachedBitmap(Bitmap As GDIPCachedBitmap, X As Long, Y As Long)
>                         
>     SetStatus GdipDrawCachedBitmap(m_gfx, Bitmap.nativeImage, X, Y)
> End Sub
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       DrawPath
> ' Description:       The DrawPath method draws a sequence of lines and curves
> '                    defined by a GraphicsPath object.
> ' Parameters :       Pen (GDIPPen)
> '                    GraphicsPath (GDIPGraphicPath)
> '--------------------------------------------------------------------------------
> Public Sub DrawPath(Pen As GDIPPen, GraphicsPath As GDIPGraphicPath)
> 
>     SetStatus GdipDrawPath(m_gfx, Pen.Value, GraphicsPath.Value)
> End Sub
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       FillPath
> ' Description:       The FillPath method uses a brush to fill the interior of
> '                    a path. If a figure in the path is not closed, this method
> '                    treats the nonclosed figure as if it were closed by a
> '                    straight line that connects the figure's starting and
> '                    ending points.
> ' Parameters :       Brush (GDIPBrush)
> '                    Path (GDIPGraphicPath)
> '--------------------------------------------------------------------------------
> Public Sub FillPath(Brush As GDIPBrush, Path As GDIPGraphicPath)
>     SetStatus GdipFillPath(m_gfx, Brush.Value, Path.Value)
> End Sub
> 
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       FillRectangle
> ' Description:       The Graphics::FillRectangle method uses a brush to fill
> '                    the interior of a rectangle.
> ' Parameters :       Brush (GDIPBrush)
> '                    R (RECTF)
> '--------------------------------------------------------------------------------
> Public Sub FillRectangle(Brush As GDIPBrush, R As RECTF)
>     
>     SetStatus GdipFillRectangle(m_gfx, Brush.Value, R.Left, R.Top, R.Width, R.Height)
> End Sub
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       FillEllipse
> ' Description:       The FillEllipse method uses a brush to fill the interior
> '                    of an ellipse that is specified by a rectangle.
> ' Parameters :       Brush (GDIPPathGradientBrush)
> '                    R (RECTF)
> '--------------------------------------------------------------------------------
> Public Sub FillEllipse(Brush As GDIPPathGradientBrush, R As RECTF)
> 
>     SetStatus GdipFillEllipse(m_gfx, Brush.Value, R.Left, R.Top, R.Width, R.Height)
> End Sub
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       DrawRectangle
> ' Description:       The DrawRectangle method draws a rectangle.
> ' Parameters :       Pen (GDIPPen)
> '                    X (Single)
> '                    y (Single)
> '                    Width (Single)
> '                    Height (Single)
> '--------------------------------------------------------------------------------
> Public Sub DrawRectangle(Pen As GDIPPen, _
>                          X As Single, _
>                          Y As Single, _
>                          Width As Single, _
>                          Height As Single)
>         
>     SetStatus GdipDrawRectangle(m_gfx, Pen.Value, X, Y, Width, Height)
> End Sub
> 
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       DrawArc
> ' Description:       DrawArc method draws an arc. The arc is part of an ellipse.
> ' Parameters :       Pen (GDIPPen)
> '                    X (Single)
> '                    y (Single)
> '                    Width (Single)
> '                    Height (Single)
> '                    startAngle (Single)
> '                    sweepAngle (Single)
> '--------------------------------------------------------------------------------
> Public Sub DrawArc(Pen As GDIPPen, _
>                    X As Single, _
>                    Y As Single, _
>                    Width As Single, _
>                    Height As Single, _
>                    startAngle As Single, _
>                    sweepAngle As Single)
>     
>     SetStatus GdipDrawArc(m_gfx, Pen.Value, X, Y, Width, Height, startAngle, sweepAngle)
> End Sub
> 
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       Transform (Untested?, TODO: Rename to SetWorldTransform)
> ' Description:       The Transform function sets a two-dimensional linear
> '                    transformation between world space and page space for the
> '                    specified device context. This transformation can be used
> '                    to scale, rotate, shear, or translate graphics output.
> ' Parameters :       theMatrix (GDIPMatrix)
> '--------------------------------------------------------------------------------
> Public Function Transform(ByRef theMatrix As GDIPMatrix)
>     GdipSetWorldTransform m_gfx, theMatrix.Value
> End Function
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       MeasureStringEx
> ' Description:       Another variation on MeasureString, does the same with
> '                    different parameters
> ' Parameters :       srcString (String)
> '                    srcFont (GDIPFont)
> '                    linesFilled (Long)
> '                    layout (RECTF)
> '--------------------------------------------------------------------------------
> Public Function MeasureStringEx(ByRef srcString As String, _
>                                 ByRef srcFont As GDIPFont, _
>                                 ByRef linesFilled As Long, _
>                                 ByRef layout As RECTF) As RECTF
>         
>     Dim BoundingBox As RECTF
> 
>     Dim codeFitted  As Long
> 
>     SetStatus GdipMeasureString(m_gfx, srcString, -1, srcFont.Value, layout, _
>            m_DrawStringFormat, BoundingBox, codeFitted, linesFilled)
>                     
>     MeasureStringEx = BoundingBox
>         
> End Function
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       DotNet_MeasureString
> ' Description:       Same as MeasureStringEx but with different parameters
> ' Parameters :       szText (String)
> '                    theFont (GDIPFont)
> '                    layoutArea (SIZEF)
> '                    charactersFitted (Long)
> '                    linedFilled (Long)
> '--------------------------------------------------------------------------------
> Public Function DotNet_MeasureString(ByRef szText As String, _
>                                      ByRef theFont As GDIPFont, _
>                                      ByRef layoutArea As SIZEF, _
>                                      Optional ByRef charactersFitted As Long, _
>                                      Optional ByRef linedFilled As Long) As SIZEF
> 
>     Dim layout      As RECTF
> 
>     Dim BoundingBox As RECTF
> 
>     layout.Width = layoutArea.Width
>     layout.Height = layoutArea.Height
> 
>     SetStatus GdipMeasureString(m_gfx, szText, -1, theFont.Value, layout, m_DrawStringFormat, BoundingBox, charactersFitted, linedFilled)
>                   
>     DotNet_MeasureString.Width = BoundingBox.Width
>     DotNet_MeasureString.Height = BoundingBox.Height
> End Function
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       MeasureString
> ' Description:       The MeasureString method measures the extent of
> '                    the string in the specified font and layout rectangle.
> ' Parameters :       srcString (String)
> '                    srcFont (GDIPFont)
> '--------------------------------------------------------------------------------
> Public Function MeasureString(ByRef srcString As String, _
>                               ByRef srcFont As GDIPFont) As RECTF
> 
>     Dim layout      As RECTF
> 
>     Dim BoundingBox As RECTF
> 
>     Dim codeFitted  As Long
> 
>     Dim linesFilled As Long
> 
>     SetStatus GdipMeasureString(m_gfx, srcString, -1, srcFont.Value, layout, m_DrawStringFormat, BoundingBox, codeFitted, linesFilled)
> 
>     MeasureString = BoundingBox
> 
> End Function
> 
> 
> '--------------------------------------------------------------------------------
> ' Procedure  :       MeasureStringWidth (TODO: Rename to GetMeasCharRangeCount)
> ' Source:            https://msdn.microsoft.com/en-us/library/windows/desktop/ms534720(v=vs.85).aspx
> ' Parameters :       szText (String)
> '                    theFont (GDIPFont)
> '--------------------------------------------------------------------------------
> Public Function MeasureStringWidth(ByVal szText As String, _
>                                    ByRef theFont As GDIPFont) As Single
> 
> 
> 'The following example defines three ranges of character positions within a
> 'string and sets those ranges in a StringFormat object. Next,
> 'the StringFormat::GetMeasurableCharacterRangeCount method is used to get the
> 'number of character ranges that are currently set in the StringFormat object.
> 'This number is then used to allocate a buffer large enough to store the
> 'regions that correspond with the ranges. Then, the MeasureCharacterRanges
> 'method is used to get the three regions of the display that are occupied by
> 'the characters that are specified by the ranges.
> 
>     Dim layoutRect    As RECTF
> 
>     Dim charRanges(0) As CharacterRange
> 
>     ' // Layout rectangle used for drawing string
>     layoutRect.Left = 0: layoutRect.Top = 0: layoutRect.Width = 0: layoutRect.Height = 0
> 
>     charRanges(0).First = 0: charRanges(0).length = Len(szText)
>    
>     ' // Other variables
>     Dim rgCharRangeRegions() As Long
> 
>     Dim i                    As Long                        ' // loop counter
> 
>     Dim count                As Long                    ' // number of character ranges set
> 
>     Dim theBounds            As RECTF
>    
>     ' // Set three ranges of character positions.
>     SetStatus GdipSetStringFormatMeasurableCharacterRanges(m_DrawStringFormat, 1, charRanges(0))
>     
>     ' // Get the number of ranges that have been set, and allocate memory to
>     ' // store the regions that correspond to the ranges.
>     SetStatus GdipGetStringFormatMeasurableCharacterRangeCount(m_DrawStringFormat, count)
> 
>     If count = 0 Then
>         'LogError 0, "MeasureStringWidth", "GDIPGraphics", "no character" & " " & szText & " " & theFont.Value & " " & Me.nativeGraphics
> 
>         Exit Function
> 
>     End If
> 
>     ReDim rgCharRangeRegions(count - 1)
> 
>     For i = 0 To count - 1
>         SetStatus GdipCreateRegion(rgCharRangeRegions(i))
>     Next
>    
>     ' // Get the regions that correspond to the ranges within the string.
>     ' // Then draw the string and show the regions.
>     SetStatus GdipMeasureCharacterRanges(m_gfx, szText, -1, theFont.Value, layoutRect, m_DrawStringFormat, count, rgCharRangeRegions(0))
>        
>     SetStatus GdipGetRegionBounds(rgCharRangeRegions(0), m_gfx, theBounds)
>     
>     For i = 0 To count - 1
>         If rgCharRangeRegions(i) Then GdipDeleteRegion rgCharRangeRegions(i)
>     Next
>     
>     MeasureStringWidth = theBounds.Width
> 
> End Function
> '-
>    
389a780,781
>         GdipDeleteStringFormat m_DrawStringFormat
>        
390a783
>         m_DrawStringFormat = 0
393a788,803
> '--------------------------------------------------------------------------------
> ' Procedure  :       Clear
> ' Description:       Clear method clears a Graphics object to a specified color.
> ' Parameters :       r_Colour (Long = -1)
> '--------------------------------------------------------------------------------
> Public Function Clear(Optional ByRef r_Colour As Long = -1) As GpStatus
> 
>     If (r_Colour = -1) Then
>         '0 is Black
>         Clear = GdipGraphicsClear(m_gfx, 0)
>     Else
>         Clear = GdipGraphicsClear(m_gfx, GetRGB_VB2GDIP(r_Colour))
>     End If
> 
> End Function
> 
397a808,811
> Private Sub Class_Initialize()
>     GdipStringFormatGetGenericTypographic m_DrawStringFormat
> End Sub
> 
